{
  "console.log": {
    "prefix": "cl",
    "body": "console.log(${1:'here'})$0"
  },
  "console.log('var', var)": {
    "prefix": "vl",
    "body": "console.log('$1', $1)$0"
  },
  "console.log({var})": {
    "prefix": "ol",
    "body": "console.log({$1})$0"
  },
  "debug with PRE": {
    "prefix": "debugpre",
    "description": "show debug values inside <pre>",
    "body": ["<pre>{JSON.stringify($1, null, 2)}</pre>"]
  },
  "new test file": {
    "prefix": "newtest",
    "description": "Test setup",
    "body": [
      "import React from 'react'",
      "import { mount } from 'enzyme'",
      "import {${TM_FILENAME_BASE/(?:^|_)([a-z])|(\\.test)|/${1:/upcase}/g} } from './${TM_FILENAME_BASE/[\\.].*//}'",
      "",
      "const setup = (propOverrides) => {",
      "\tconst props = {",
      "\t// define props here",
      "\t$0",
      "\t...propOverrides",
      "\t}",
      "\tconst wrapper = mount(<${TM_FILENAME_BASE/(?:^|_)([a-z])|(\\.test)|/${1:/upcase}/g} {...props} />)",
      "\treturn {",
      "\t\tprops,",
      "\t\twrapper",
      "\t}",
      "}",
      "",
      "",
      "test('<${TM_FILENAME_BASE/(?:^|_)([a-z])|(\\.test)|/${1:/upcase}/g} /> renders', () => {",
      "\tconst { wrapper } = setup()",
      "\texpect(wrapper.exists()).toBeTruthy()",
      "})",
      "",
      "test.todo('more tests')"
    ]
  },
  "effect": {
    "prefix": "effect",
    "description": "UseEffect template",
    "body": ["useEffect(() => {", "\t", "}, [$0])"]
  },

  "import proptypes": {
    "prefix": "ipt",
    "description": "import PropTypes",
    "body": ["import PropTypes from 'prop-types'; "]
  },

  "import React": {
    "prefix": "ir",
    "body": ["import React from 'react'\n"]
  },
  "React.useState": {
    "prefix": "us",
    "body": [
      "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = React.useState(${2:initial${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}})$0"
    ]
  },
  "React.useEffect": {
    "prefix": "uf",
    "body": ["React.useEffect(() => {", "  $0", "}, [])"]
  },
  "React.useReducer": {
    "prefix": "ur",
    "body": [
      "const [state, dispatch] = React.useReducer(${1:someReducer}, {",
      "  $0",
      "})"
    ]
  },
  "React.useRef": {
    "prefix": "urf",
    "body": ["const ${1:someRef} = React.useRef($2)$0"]
  },
  "React Class Component": {
    "prefix": "rcc",
    "body": [
      "class $1 extends React.Component {",
      "  render() {",
      "    $0",
      "  }",
      "}"
    ]
  },
  "React: componentWillMount": {
    "prefix": "cwm",
    "body": ["componentWillMount() {", "  $0", "}"]
  },
  "React: componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "  $0", "}"]
  },
  "React: componentWillReceiveProps": {
    "prefix": "cwrp",
    "body": ["componentWillReceiveProps(nextProps) {", "  $0", "}"]
  },
  "React: componentWillUpdate": {
    "prefix": "cwu",
    "body": ["componentWillUpdate(nextProps, nextState) {", "  $0", "}"]
  },
  "React: componentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps, prevState) {", "  $0", "}"]
  },
  "React: componentWillUnmount": {
    "prefix": "cwu",
    "body": ["componentWillUnmount() {", "  $0", "}"]
  },
  "Jest test": {
    "prefix": "test",
    "body": ["test('$1', () => {", "  $0", "})"]
  },
  "Jest async test": {
    "prefix": "atest",
    "body": ["test('$1', async () => {", "  $0", "})"]
  }
}
